{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","image","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KA0B5C,OACI,sBAAMC,SAhBS,SAACC,GAEhBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACxBR,GAAe,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACtCN,EAAc,KAGlBO,QAAQC,IAAI,iBAOZ,SAEA,uBACIC,KAAK,OACLC,MAAOX,EACPY,SA5BiB,SAACT,GAEtBK,QAAQC,IAAIN,EAAEU,OAAOF,OAErBV,EAAcE,EAAEU,OAAOF,a,+BCVlBG,EAAO,uCAAC,WAAQC,GAAR,uBAAAC,EAAA,6DAEXC,EAFW,iDAEsCC,UAAUH,GAFhD,+DAGEI,MAAMF,GAHR,cAGXG,EAHW,gBAOIA,EAAKC,OAPT,uBAOVC,EAPU,EAOVA,KAEDC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAE3B,MAAO,CACHC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MACbV,IAAG,UAAEQ,EAAMG,cAAR,aAAE,EAAcC,iBAAiBZ,QAd3B,kBAsBVM,GAtBU,4CAAD,sDCCHO,EAAc,SAAC,GAAoB,EAAnBJ,GAAoB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGvC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IAEpB,4BAAIA,QCJHO,EAAU,SAAC,GAAiB,IAAfnB,EAAc,EAAdA,SAAc,ECAZ,SAACA,GAAW,MAGVhB,mBAAS,CAC/BuB,KAAK,GACLa,SAAS,IALuB,mBAG7BC,EAH6B,KAGtBC,EAHsB,KA0CpC,OAjCAC,qBAAU,WAGNxB,EAAQC,GAAUwB,MAAM,SAAAC,GAIhBhC,QAAQC,IAAI+B,GAEZH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAQvB,CAACpB,IAcIqB,ED/BuBK,CAAa1B,GAA/Ba,EAXwB,EAW7BN,KAAYa,EAXiB,EAWjBA,QAiBnB,OAfA3B,QAAQC,IAAI0B,GAgBR,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAIlDoB,GAAW,mBAAGJ,UAAU,mCAAb,kCAEX,qBAAKA,UAAU,YAAf,SAiBWH,EAAOJ,KAAK,SAAAkB,GAAG,OAEX,cAAC,EAAD,eAKSA,GAHFA,EAAIhB,aE3DtBiB,EAAe,WAAM,MAIM5C,mBAAS,CAAE,cAJjB,mBAIvB6C,EAJuB,KAIX9C,EAJW,KAiB9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAKA,6BAEQ8C,EAAWpB,KAAI,SAACqB,GAAD,OAEX,aADA,CACC,EAAD,CAEA9B,SAAY8B,GADLA,Y,MC5B/BC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.93ad3455.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setinputValue] = useState('') //si se inicia con vacio sera undefined y marcara error\n\n    const handleInputValue = (e)=>{\n\n        console.log(e.target.value)\n\n        setinputValue(e.target.value)\n    }\n\n    const handleSubmit=(e)=>{\n\n        e.preventDefault();\n\n        if(inputValue.trim().length>2){\n            setCategories( cats=> [inputValue, ...cats ]);\n            setinputValue('');\n        }\n\n        console.log('submit hecho');\n\n        \n\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n\n        <input\n            type=\"text\"\n            value={inputValue}\n            onChange={ handleInputValue}\n        />\n            \n        </form>\n    )\n}\n\n\n\nAddCategory.propTypes={\n    setCategories: PropTypes.func.isRequired\n}","\n\nexport const getGifs=async ( category )=>{\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=XR4CoA7iJJ2Hpt8rOoy7tkEZZ8iM9IkQ`;\n    const resp = await fetch(url);\n\n    //const data = await resp.json();\n\n    const {data} = await resp.json();\n\n    const gifs = data.map((image)=>{\n\n        return {\n            id: image.id,\n            title: image.title,\n            url: image.images?.downsized_medium.url\n        }\n    })\n\n    //console.log(gifs);\n\n    //setImages(gifs);\n\n    return gifs;\n    \n\n}","import React from 'react'\n\n// export const GifGridItem = (img) => {\n    export const GifGridItem = ({id,title, url}) => {\n\n    //console.log(id,title, url)\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n            <img src={url} alt={title} />\n\n            <p>{title}</p>\n    \n        </div>\n    )\n}\n","//import React, { useState , useEffect } from 'react'\nimport React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n//import { getGifs } from '../helpers/GetGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( {category}) => {\n\n    \n\n    //const [count, setCount] = useState(0);\n\n    //const [images, setImages] = useState([])\n\n    //const state = useFetchGifs();\n    //la linea anterior puede ser: const { data, loading} = useFetchGifs();\n\n    const {data:images,loading} = useFetchGifs(category);\n\n    console.log(loading);\n\n\n\n    //ejecuta la funcion getGifs solo cuando el componente es ejecutado la 1a vez\n    //el array vacio implica que tiene ninguna dependencia\n\n    /* useEffect(()=>{\n        getGifs( category ).then(  setImages  ); //el anterior es lo mismo: ( imgs=> setImages(imgs) );\n    },[category]); */\n\n    \n\n    //getGifs();\n\n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n        {/* { loading? 'Cargando':'Fin de carga'} */}\n\n        {loading && <p className=\"animate__animated animate__flash\">Cargando imagenes...</p>}\n\n         <div className=\"card-grid\"> \n\n                {/* {images.map((image)=>{\n\n                return <li key= {image.id}> {image.title}</li>\n\n                })} */}\n\n                {/*desestructurando el objeto que llega se referncia directamente el campo*/}\n\n                 {/* {images.map(({id, title})=>{\n\n                    //return <li key= {id}> {title}</li>\n\n                })} */}\n                \n                {\n                    images.map( img=>(\n\n                        <GifGridItem \n\n                        key = {img.id}\n                        \n                        // Se puede enviar como img y recibir un objeto ó como ...img y recibir cada campo\n                            { ...img } \n                        /> \n\n\n\n                    ))\n                }\n\n\n           \n\n\n            {/* <h3>{count}</h3>\n            <button onClick={ ()=> setCount(count +1 )} ></button> */}\n            \n         </div> \n        </>\n    )\n}\n","//ESTO ES UN CUSTOM HOOK\n\n\nimport { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/GetGifs\";\n\nexport const useFetchGifs = (category)=>{\n\n    //por primera vez estará cargando\n    const [state, setstate] = useState({\n        data:[],\n        loading: true\n\n    });\n\n    useEffect(()=>{\n\n        //getGifs regresa una promesa, entonces se usa el then porque effect no puede usar async\n        getGifs(category).then( imgs=>{\n\n            //setTimeout(() => {\n\n                console.log(imgs)\n            \n                setstate({\n                    data: imgs,\n                    loading: false\n                });\n\n            //}, 3000);\n\n\n        })\n\n    },[category])\n\n    /* setTimeout(() => {\n\n        setstate({\n            data:[1,2,3,4],\n            loading: false\n\n        });\n        \n    }, 3000); */\n\n    //state es solo un nombre que puede ser cualquiera\n\n    return state; //{data:[], loading:true}\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n\n    const [categories, setCategories] = useState([ 'Samurai X']);\n\n/*     const handleAdd = ()=>{\n\n        //setCategories([...categories,'Nuevo']); //asi reemplaza el valor de categories, no lo agrega al arreglo previemente existente\n\n        setCategories( cats => [...cats,'Nuevo']); // se toma su ultimo estado anterior y luego se le agrega el nuevo elemento\n\n        //las 2 opciones anteriores son validas\n\n\n    }; */\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories = {setCategories} />\n            <hr/>\n\n\n            {/* <button onClick={handleAdd}>Agregar</button> */}\n\n            <ol>\n                {\n                    categories.map((cat)=>(\n                        // {return <li key={cat}> {cat} </li>}\n                        <GifGrid \n                        key = {cat}\n                        category = {cat} />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n//reportWebVitals();\n"],"sourceRoot":""}